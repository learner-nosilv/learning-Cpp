/* [커피 자판기 시뮬레이터] C++로 객체지향구조에 따라 작성하기
* 1. 소스파일 및 클래스 간략 소개
*	- Main.cpp						메인 함수
*	- Material.h					재료 클래스
*	- Recipe.h, Recipe.cpp			제조법 클래스
*	- Machine.h, Machine.cpp		제조기계 클래스
*	- MachineUI.h, MachineUI.cpp	제조기계-사용자 인터페이스 클래스
*	
* 2. 클래스 설명
*	- Material : `재료`를 { 재료명, 재료량 } 으로 추상화한 클래스
*	- Recipe : `제조법`을 { 레시피명, 팔요한 재료들의 이름과 재료량 } 으로 추상화한 클래스
*	- Machine : `제조기계`를 { 제조가능한 레시피들, 보유한 재료통들 / 제조, 재료통 충전, 사용자UI로 구동} 으로 추상화 한 클래스
*	- MachineUI : `제조기계`가 사용하는 static함수들의 모음으로 사용자 - `제조기계` 간 소통지원
*
* 3. 프로그램의 구현 상 특징 정리
*	- 꼭 문제가 요구한 재료들이 아니어도, 만드는 음식이 3가지의 커피가 아니어도, 레시피가 다르더라도 사용이 가능하도록 [이식성]을 높힘
*		Machine coffee;는 커피 레시피가 장착된 `제조기계`일 뿐
*	- [연산자 오버로딩]을 이용하여, 동일한 클래스의 객체 간 혹은 서로 다른 클래스의 객체 간 연산을 구현함
*	- [함수 오버로딩]을 이용하여, 추상적인 기능은 같으나 매개변수는 엄연히 다른 함수를 같은 함수명으로 구현함
*	- [포인터]를 파라미터나 반환형으로 사용하여, 기본형 배열과 객체 배열을 인자로 사용하거나 리턴함
*	- [묵시적 inline 함수]를 사용하여, 간단한 멤버함수들은 호출이 아니라 코드가 삽입되도록 함
*	- 클래스에 [static함수]를 작성하여, 객체 생성없이 사용할 수 있도록 함
*   - [전역변수]를 사용하여, 추후 코드변경을 최소화 함
* 
* 4. 프로그램과 클래스에 대한 세부적, 종합적 설명
* *	- Material : `재료`를 { 재료명, 재료량 } 으로 추상화한 클래스
*		특징1) [연산자 오버로딩] `재료a` -= `재료b` 는 재료명이 같고 a의 양이 충분한 경우, 재료량끼리 -= 연산 진행
*		특징2) [묵시적 inline] 멤버함수들이 짧고 간단하여 모든 멤버가 묵시적 inline 함수로 구현된 .h 파일로만 존재
						(.h와 .cpp로 나눈 후 inline 키워드로 구현하면 LNK2019 오류 발생)
		특징3) [전역상수]  #define MATERIAL 5 은 레시피에 사용되는 재료종류/머신이 보유한 재료종류의 갯수로
						추후에 재료 수가 바뀌어도 코드변경을 최소화할 수 있도록 작성하였음
						(recipe클래스의 setRecipe()와 Machine의 생성자만 조정하면 됨)
*	- Recipe : `제조법`을 { 레시피명, 팔요한 재료들의 이름과 재료량 } 으로 추상화한 클래스
*		특징1) [함수 오버로딩] setRecipe: 레시피 작성시, 재료량이 동일한 경우와 다른 경우로 함수 오버로딩
*		특징2) [포인터로 배열전달]	int*형 파라미터로 int형 배열을 이용하는 멤버함수 setRecipe와
						재료배열을 Material*형으로 리턴하는 멤버함수 showMaterial이 있음
*	- Machine : `제조기계`를 { 제조가능한 레시피들, 보유한 재료통들 / 제조, 재료통 충전, 사용자UI로 구동} 으로 추상화 한 클래스
*		특징1) [연산자 오버로딩] `제조기계`-=`레시피` 는 레시피 제조에 필요햔 양만큼 기계의 재료통에서 재료를 소모함
*						제조기계의 재료통과 레시피의 멤버변수는 크기가 MATERIAL로 같은 Material형 배열이다.
*						Material형 간 -= 연산이 이미 존재하므로 `제조기계`-=`레시피`연산도 구현가능
*		특징2) [전역상수] #define RECIPE 3 는 머신이 보유한 레시피 갯수 (이 값이 변경되는 경우, Machine의 생성자만 조정하면 됨)
*						#define FILL 3 는 머신의 재료통 용량 (조정시, 이 값만 조정하면 됨)
*	- MachineUI : `제조기계`가 사용하는 static함수들의 모음으로 사용자 - `제조기계` 간 소통지원
*						`제조기계`의 상태(실행/종료/제조성공/제조실패/재료통현황)를 알려주는 콘솔출력 함수들의 집합
*						getMenu()를 통해 사용자의 명령을 `제조기계`가 인식할 수 있는 형태로 변환
*		특징1) [static 함수] 해당 클래스는 전부 static멤버이므로 객체생성없이 사용가능
*/

#include "Machine.h"
int main() {
	Machine coffee;
	coffee.run();
	return 0;
}